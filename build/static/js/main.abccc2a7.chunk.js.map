{"version":3,"sources":["components/header.js","components/generator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Generator","state","topText","bottomText","randomImg","allMemeImgs","isGenerating","colorT","colorB","changeHandler","bind","generator","changeColorT","changeColorB","this","setState","fetch","then","response","json","memes","data","catch","err","console","log","event","target","name","value","preventDefault","randomNum","parseInt","Math","random","length","url","className","onSubmit","type","onChange","placeholder","src","alt","style","color","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abccc2a7.chunk.js","sourcesContent":["import React from 'react'\nimport './header.css'\n\n\nfunction Header() {\n    \n    return(\n        <header>\n            {/* <img src={require('cat.jpg')} alt='cat'/> */}\n            <div>\n                <p>Meme Generator</p>\n            </div>\n        </header>\n    )\n\n}\n\nexport default Header;","import React, {Component} from 'react'\nimport './generator.css'\n\n\nclass Generator extends Component{\n\n    constructor(){\n        super()\n\n        this.state = {\n            topText: '',\n            bottomText: '',\n            randomImg: '',\n            allMemeImgs: [],\n            isGenerating: true,\n            colorT: 'black',\n            colorB: 'black'\n        }\n\n        this.changeHandler = this.changeHandler.bind(this)\n        this.generator = this.generator.bind(this)\n        this.changeColorT =  this.changeColorT.bind(this)\n        this.changeColorB =  this.changeColorB.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({isGenerating: true})\n        fetch('https://api.imgflip.com/get_memes')\n        .then(response=>\n            response.json()\n        )\n        .then(response=>{\n            const {memes} = response.data\n            this.setState({\n                allMemeImgs: memes,\n                isGenerating: false\n            })\n        })\n        .catch((err)=>{\n            console.log(`Error: ${err}`)\n        })\n    }\n\n    changeHandler(event){\n        const {name, value} = event.target\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    generator(event){\n        event.preventDefault()\n        let randomNum = parseInt(Math.random()*(this.state.allMemeImgs.length))\n        this.setState({\n            randomImg: this.state.allMemeImgs[randomNum].url\n        })\n    }\n\n    changeColorT(event){\n        const {name, value} = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    changeColorB(event){\n        const {name, value} = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render(){\n\n        return(\n            <div className=\"generator\">\n                <form onSubmit={this.generator}>\n                    \n                    <input \n                    type=\"text\" \n                    name=\"topText\" \n                    value={this.state.topText} \n                    onChange={this.changeHandler}\n                    placeholder=\"Top Text\" />\n                    <select name=\"colorT\" value={this.state.colorT} onChange={this.changeColorT}>\n                        <option>--Pick Color--</option>\n                        <option>red</option>\n                        <option>green</option>\n                        <option>yellow</option>\n                        <option>blue</option>\n                        <option>black</option>\n                    </select>\n                    <br/>\n                    <input \n                    type=\"text\" \n                    name=\"bottomText\" \n                    value={this.state.bottomText} \n                    onChange={this.changeHandler}\n                    placeholder=\"Bottom Text\" />\n                    <select name=\"colorB\" value={this.state.colorB} onChange={this.changeColorB}>\n                        <option>--Pick Color--</option>\n                        <option>red</option>\n                        <option>green</option>\n                        <option>yellow</option>\n                        <option>blue</option>\n                        <option>black</option>\n                    </select>\n\n                <br/>\n                <button>Generate</button>\n                </form>\n\n                <div className=\"generated\">\n                    {\n                        (this.state.isGenerating) ? <p>Generating...</p> : <img src={this.state.randomImg} alt=\"\" />\n                    }\n                    <div className=\"genTexts\">\n                        <h2 className=\"topText\" style={{color: this.state.colorT}}>{this.state.topText}</h2>\n                        <h2 className=\"bottomText\" style={{color: this.state.colorB}}>{this.state.bottomText}</h2>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Generator","import './App.css';\nimport Header from './components/header'\nimport Generator from './components/generator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Generator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}